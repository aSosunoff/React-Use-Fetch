{"version":3,"sources":["webpack:///./index.ts","webpack:///./useHeaderas.ts","webpack:///external \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"names":["useFetch","url","isCache","useState","options","setOptions","cache","useRef","isFetch","setFetch","useHeaders","headers","setHeadersHandler","clearHeadersHandler","initialState","useMemo","status","error","undefined","data","fetchReducer","useCallback","state","action","type","payload","useReducer","dispatch","request","success","failure","useEffect","cancelRequest","current","responseType","optionsFetch","fetch","toString","response","ok","json","text","formData","blob","arrayBuffer","Error","setHeaders","headersFinal","Array","from","entries","reduce","res","key","value","module","exports","__WEBPACK_EXTERNAL_MODULE__297__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"mappings":"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","file":"index.min.js","sourcesContent":["import { useHeaders } from \"./useHeaderas\";\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from \"react\";\n\ntype Action<K extends string, V = void> = V extends void\n  ? { type: K }\n  : { type: K } & V;\n\ntype ActionFetch<T> =\n  | Action<\"request\">\n  | Action<\"success\", { payload: T }>\n  | Action<\"failure\", { payload: any }>;\n\nexport interface State<T, TError = any> {\n  status: \"init\" | \"request\" | \"failure\" | \"success\";\n  data?: T;\n  error?: TError;\n}\n\ninterface Cache<T> {\n  [url: string]: T;\n}\n\ninterface UseFetchOption extends RequestInit {\n  responseType?: \"text\" | \"json\" | \"formData\" | \"blob\" | \"arrayBuffer\";\n}\n\nexport const useFetch = <TData, TError = any>(\n  url: string,\n  isCache = false\n): [\n  State<TData, TError>,\n  (options?: UseFetchOption) => void,\n  ReturnType<typeof useHeaders>[\"headers\"]\n] => {\n  const [options, setOptions] = useState<UseFetchOption>({} as UseFetchOption);\n\n  const cache = useRef<Cache<TData>>({});\n\n  const [isFetch, setFetch] = useState(false);\n\n  const { headers, setHeadersHandler, clearHeadersHandler } = useHeaders();\n\n  const initialState = useMemo<State<TData, TError>>(\n    () => ({\n      status: \"init\",\n      error: undefined,\n      data: undefined,\n    }),\n    []\n  );\n\n  const fetchReducer = useCallback(\n    (\n      state: State<TData, TError>,\n      action: ActionFetch<TData>\n    ): State<TData, TError> => {\n      switch (action.type) {\n        case \"request\":\n          return { ...initialState, status: \"request\" };\n        case \"success\":\n          return { ...initialState, status: \"success\", data: action.payload };\n        case \"failure\":\n          return { ...initialState, status: \"failure\", error: action.payload };\n        default:\n          return state;\n      }\n    },\n    [initialState]\n  );\n\n  const [state, dispatch] = useReducer(fetchReducer, initialState);\n  const request = useCallback(() => dispatch({ type: \"request\" }), []);\n  const success = useCallback(\n    (payload) => dispatch({ type: \"success\", payload }),\n    []\n  );\n  const failure = useCallback(\n    (payload) => dispatch({ type: \"failure\", payload }),\n    []\n  );\n\n  useEffect(() => {\n    if (!url || !isFetch) {\n      return;\n    }\n\n    let cancelRequest = false;\n\n    const doFetch = async () => {\n      request();\n\n      if (isCache && cache.current[url]) {\n        setFetch(() => false);\n        !cancelRequest && success(cache.current[url]);\n        return;\n      }\n\n      const { responseType, ...optionsFetch } = options;\n\n      const response = await fetch(url.toString(), optionsFetch);\n\n      setHeadersHandler(response.headers);\n\n      if (!response.ok) {\n        const body = await response.json();\n        throw body;\n      }\n\n      let data = null;\n\n      switch (responseType) {\n        case \"text\":\n          data = await response.text();\n          break;\n        case \"json\":\n          data = await response.json();\n          break;\n        case \"formData\":\n          data = await response.formData();\n          break;\n        case \"blob\":\n          data = await response.blob();\n          break;\n        case \"arrayBuffer\":\n          data = await response.arrayBuffer();\n          break;\n        default:\n          throw new Error(\"Not found type of response\");\n      }\n\n      if (!cancelRequest) {\n        cache.current[url] = data;\n        setFetch(() => false);\n        success(data);\n      }\n    };\n\n    doFetch().catch((error) => {\n      if (!cancelRequest) {\n        setFetch(() => false);\n        clearHeadersHandler();\n        failure(error);\n      }\n    });\n\n    return () => {\n      cancelRequest = true;\n    };\n  }, [\n    clearHeadersHandler,\n    failure,\n    isCache,\n    isFetch,\n    options,\n    request,\n    setHeadersHandler,\n    success,\n    url,\n  ]);\n\n  const doFetch = useCallback((options?: UseFetchOption) => {\n    setOptions(() => ({\n      responseType: \"json\",\n      ...options,\n    }));\n    setFetch(() => true);\n  }, []);\n\n  return [state, doFetch, headers];\n};\n","import { useCallback, useState } from \"react\";\n\ntype useHeadersState = {\n  [key: string]: string;\n} | null;\n\nexport const useHeaders = () => {\n  const [headers, setHeaders] = useState<useHeadersState>(null);\n\n  const setHeadersHandler = useCallback((headers: Headers) => {\n    const headersFinal = Array.from(headers.entries()).reduce(\n      (res, [key, value]) => ({\n        ...res,\n        [key]: value,\n      }),\n      {}\n    );\n\n    setHeaders(() => headersFinal);\n  }, []);\n\n  const clearHeadersHandler = useCallback(() => {\n    setHeaders(() => null);\n  }, []);\n\n  return {\n    headers,\n    setHeadersHandler,\n    clearHeadersHandler,\n  };\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__297__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(447);\n"],"sourceRoot":""}