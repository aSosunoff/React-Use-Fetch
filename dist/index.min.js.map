{"version":3,"sources":["webpack:///./index.ts","webpack:///./tuple.ts","webpack:///./use-fetch-reducer.ts","webpack:///./use-headers.ts","webpack:///./use-trigger.ts","webpack:///external \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"names":["useFetch","url","useState","options","setOptions","useHeaders","headers","setHeadersHandler","clearHeadersHandler","useFetchReducer","state","request","success","failure","useTrigger","isFetch","fetchStart","fetchFinish","useEffect","cancelRequest","responseType","optionsFetch","fetch","toString","response","ok","json","data","text","formData","blob","arrayBuffer","Error","error","doFetch","useCallback","tuple","args","initialState","useMemo","status","undefined","fetchReducer","action","type","payload","useReducer","dispatch","setHeaders","headersFinal","Array","from","entries","reduce","res","key","value","setState","onHandler","offHandler","togglerHandler","prev","module","exports","__WEBPACK_EXTERNAL_MODULE__297__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"mappings":"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","file":"index.min.js","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport { useTrigger } from \"./use-trigger\";\nimport { tuple } from \"./tuple\";\nimport { useFetchReducer } from \"./use-fetch-reducer\";\nimport { useHeaders } from \"./use-headers\";\n\ninterface UseFetchOption extends RequestInit {\n  responseType?: \"text\" | \"json\" | \"formData\" | \"blob\" | \"arrayBuffer\";\n}\n\nexport const useFetch = <TData, TError = any>(url: string) => {\n  const [options, setOptions] = useState<UseFetchOption>({} as UseFetchOption);\n\n  const { headers, setHeadersHandler, clearHeadersHandler } = useHeaders();\n\n  const { state, request, success, failure } = useFetchReducer<TData, TError>();\n\n  const [isFetch, { onHandler: fetchStart, offHandler: fetchFinish }] =\n    useTrigger();\n\n  useEffect(() => {\n    if (!isFetch) {\n      return;\n    }\n\n    let cancelRequest = false;\n\n    const doFetch = async () => {\n      const { responseType, ...optionsFetch } = options;\n\n      const response = await fetch(url.toString(), optionsFetch);\n\n      setHeadersHandler(response.headers);\n\n      if (!response.ok) {\n        const body = await response.json();\n        throw body;\n      }\n\n      let data = null;\n\n      switch (responseType) {\n        case \"text\":\n          data = await response.text();\n          break;\n        case \"json\":\n          data = await response.json();\n          break;\n        case \"formData\":\n          data = await response.formData();\n          break;\n        case \"blob\":\n          data = await response.blob();\n          break;\n        case \"arrayBuffer\":\n          data = await response.arrayBuffer();\n          break;\n        default:\n          throw new Error(\"Not found type of response\");\n      }\n\n      if (!cancelRequest) {\n        fetchFinish();\n        success(data);\n      }\n    };\n\n    doFetch().catch((error) => {\n      if (!cancelRequest) {\n        fetchFinish();\n        clearHeadersHandler();\n        failure(error);\n      }\n    });\n\n    return () => {\n      cancelRequest = true;\n    };\n  }, [\n    clearHeadersHandler,\n    failure,\n    isFetch,\n    options,\n    setHeadersHandler,\n    success,\n    url,\n    fetchFinish,\n  ]);\n\n  const doFetch = useCallback(\n    (options?: UseFetchOption) => {\n      request();\n\n      setOptions(() => ({\n        responseType: \"json\",\n        ...options,\n      }));\n\n      fetchStart();\n    },\n    [request, fetchStart]\n  );\n\n  return tuple(state, doFetch, headers);\n};\n","export const tuple = <T extends unknown[]>(...args: T): T => args;\n","import { useCallback, useMemo, useReducer } from \"react\";\nimport { State, ActionFetch } from \"./types\";\n\nexport const useFetchReducer = <TData, TError>() => {\n  const initialState = useMemo<State<TData, TError>>(\n    () => ({\n      status: \"init\",\n      error: undefined,\n      data: undefined,\n    }),\n    []\n  );\n\n  const fetchReducer = useCallback(\n    (\n      state: State<TData, TError>,\n      action: ActionFetch<TData, TError>\n    ): State<TData, TError> => {\n      switch (action.type) {\n        case \"request\":\n          return { ...initialState, status: \"request\", data: state.data };\n        case \"success\":\n          return { ...initialState, status: \"success\", data: action.payload };\n        case \"failure\":\n          return { ...initialState, status: \"failure\", error: action.payload };\n        default:\n          return state;\n      }\n    },\n    [initialState]\n  );\n\n  const [state, dispatch] = useReducer(fetchReducer, initialState);\n\n  const request = useCallback(() => dispatch({ type: \"request\" }), []);\n\n  const success = useCallback(\n    (payload) => dispatch({ type: \"success\", payload }),\n    []\n  );\n\n  const failure = useCallback(\n    (payload) => dispatch({ type: \"failure\", payload }),\n    []\n  );\n\n  return {\n    state,\n    request,\n    success,\n    failure,\n  };\n};\n","import { useCallback, useState } from \"react\";\n\ntype useHeadersState = {\n  [key: string]: string;\n} | null;\n\nexport const useHeaders = () => {\n  const [headers, setHeaders] = useState<useHeadersState>(null);\n\n  const setHeadersHandler = useCallback((headers: Headers) => {\n    const headersFinal = Array.from(headers.entries()).reduce(\n      (res, [key, value]) => ({\n        ...res,\n        [key]: value,\n      }),\n      {}\n    );\n\n    setHeaders(() => headersFinal);\n  }, []);\n\n  const clearHeadersHandler = useCallback(() => {\n    setHeaders(() => null);\n  }, []);\n\n  return {\n    headers,\n    setHeadersHandler,\n    clearHeadersHandler,\n  };\n};\n","import { useState, useCallback } from 'react';\nimport { tuple } from './tuple';\n\nexport const useTrigger = (initialState = false) => {\n  const [state, setState] = useState(initialState);\n\n  const onHandler = useCallback(() => setState(() => true), []);\n\n  const offHandler = useCallback(() => setState(() => false), []);\n\n  const togglerHandler = useCallback(() => setState((prev) => !prev), []);\n\n  return tuple(state, {\n    onHandler,\n    offHandler,\n    togglerHandler,\n  });\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__297__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(447);\n"],"sourceRoot":""}