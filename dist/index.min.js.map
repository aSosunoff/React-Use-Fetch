{"version":3,"sources":["webpack:///./hooks/use-fetch-reducer.ts","webpack:///./hooks/use-trigger.ts","webpack:///./use-fetch-by-callback/index.ts","webpack:///./use-fetch-by-callback/use-params.ts","webpack:///./use-fetch-by-url/index.ts","webpack:///./use-fetch-by-url/use-headers.ts","webpack:///./utils/tuple.ts","webpack:///external \"react\"","webpack:///webpack/bootstrap","webpack:///./index.ts"],"names":["useFetchReducer","initialState","useMemo","status","error","undefined","data","fetchReducer","useCallback","state","action","type","payload","useReducer","dispatch","request","success","failure","useTrigger","useState","setState","onHandler","offHandler","togglerHandler","prev","tuple","useCallbackAsync","callback","isStartFetch","fetchStart","fetchFinish","useParams","params","setParamsHandler","clearParamsHandler","useEffect","cancelRequest","doFetch","setParams","useFetchByUrl","url","options","setOptions","useHeaders","headers","setHeadersHandler","clearHeadersHandler","isFetch","responseType","optionsFetch","fetch","toString","response","ok","json","text","formData","blob","arrayBuffer","Error","setHeaders","headersFinal","Array","from","entries","reduce","res","key","value","args","module","exports","__WEBPACK_EXTERNAL_MODULE__297__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"mappings":"qXAAA,aAiBa,EAAAA,gBAAkB,WAC7B,IAAMC,EAAe,EAAAC,SACnB,WAAM,MAAC,CACLC,OAAQ,OACRC,WAAOC,EACPC,UAAMD,KAER,IAGIE,EAAe,EAAAC,aACnB,SACEC,EACAC,GAEA,OAAQA,EAAOC,MACb,IAAK,UACH,cAAYV,GAAY,CAAEE,OAAQ,UAAWG,KAAMG,EAAMH,OAC3D,IAAK,UACH,cAAYL,GAAY,CAAEE,OAAQ,UAAWG,KAAMI,EAAOE,UAC5D,IAAK,UACH,cAAYX,GAAY,CAAEE,OAAQ,UAAWC,MAAOM,EAAOE,UAC7D,QACE,OAAOH,KAGb,CAACR,IAGG,EAAoB,EAAAY,WAAWN,EAAcN,GAA5CQ,EAAK,KAAEK,EAAQ,KActB,MAAO,CACLL,MAAK,EACLM,QAdc,EAAAP,aAAY,WAAM,OAAAM,EAAS,CAAEH,KAAX,cAA+B,IAe/DK,QAbc,EAAAR,aACd,SAACI,GAAY,OAAAE,EAAS,CAAEH,KAAM,UAAWC,QAA5B,MACb,IAYAK,QATc,EAAAT,aACd,SAACI,GAAY,OAAAE,EAAS,CAAEH,KAAM,UAAWC,QAA5B,MACb,O,mFCzDJ,aACA,SAEa,EAAAM,WAAa,SAACjB,QAAA,IAAAA,OAAA,GACnB,MAAoB,EAAAkB,SAASlB,GAA5BQ,EAAK,KAAEW,EAAQ,KAEhBC,EAAY,EAAAb,aAAY,WAAM,OAAAY,GAAS,WAAM,cAAO,IAEpDE,EAAa,EAAAd,aAAY,WAAM,OAAAY,GAAS,WAAM,cAAQ,IAEtDG,EAAiB,EAAAf,aAAY,WAAM,OAAAY,GAAS,SAACI,GAAS,cAAQ,IAEpE,OAAO,EAAAC,MAAMhB,EAAO,CAClBY,UAAS,EACTC,WAAU,EACVC,eAAc,M,89CCflB,aACA,SACA,SACA,SACA,SAEa,EAAAG,iBAAmB,SAK9BC,GAEM,MAAuC,EAAA3B,kBAArCS,EAAK,QAAEM,EAAO,UAAEC,EAAO,UAAEC,EAAO,UAElC,EACJ,EAAAC,aADKU,EAAY,KAAE,OAAaC,EAAU,YAAcC,EAAW,aAG/D,EAAmD,EAAAC,YAAjDC,EAAM,SAAEC,EAAgB,mBAAEC,EAAkB,qBAEpD,EAAAC,WAAU,WACR,GAAKP,EAAL,CAEA,IAAIQ,GAAgB,EAoBpB,OAlBA,W,IAAQ,sD,oGAES,O,sBAAA,GAAMT,EAAQ,aAAIK,I,OAE/B,OAFM1B,EAAO,SAET8B,EAAe,KAEnBN,IACAd,EAAQV,GACR4B,I,cAEA,O,WAAIE,EAAe,KAEnBN,IACAb,EAAQ,GACRiB,I,gCAEF,aAAIF,GAEC,WACLI,GAAgB,MAEjB,CACDT,EACAV,EACAa,EACAF,EACAZ,EACAgB,EACAE,IAGF,IAAMG,EAAU,EAAA7B,aACd,W,IAAC,sDACCyB,EAAiBD,GACjBjB,IACAc,MAEF,CAACd,EAASc,EAAYI,IAGxB,OAAO,EAAAR,MAAMhB,EAAO4B,K,kFCjEtB,aAEa,EAAAN,UAAY,WACjB,MAAsB,EAAAZ,SAAkB,IAAvCa,EAAM,KAAEM,EAAS,KAUxB,MAAO,CACLN,OAAM,EACNC,iBAVuB,EAAAzB,aAAY,SAACwB,GACpCM,GAAU,WAAM,OAAAN,OACf,IASDE,mBAPyB,EAAA1B,aAAY,WACrC8B,GAAU,WAAM,cACf,O,6hECXL,aACA,SACA,SACA,SACA,SAMa,EAAAC,cAAgB,SAAsBC,GAC3C,MAAwB,EAAArB,SAAyB,IAAhDsB,EAAO,KAAEC,EAAU,KAEpB,EAAsD,EAAAC,aAApDC,EAAO,UAAEC,EAAiB,oBAAEC,EAAmB,sBAEjD,EAAuC,EAAA9C,kBAArCS,EAAK,QAAEM,EAAO,UAAEC,EAAO,UAAEC,EAAO,UAElC,EACJ,EAAAC,aADK6B,EAAO,KAAE,OAAalB,EAAU,YAAcC,EAAW,aAGhE,EAAAK,WAAU,WACR,GAAKY,EAAL,CAIA,IAAIX,GAAgB,EAkDpB,OAhDgB,mC,8DAGG,OAFTY,EAAkCP,EAAtB,aAAKQ,EAAY,EAAKR,EAApC,kBAEW,GAAMS,MAAMV,EAAIW,WAAYF,I,cAAvCG,EAAW,SAEjBP,EAAkBO,EAASR,SAEtBQ,EAASC,GAAV,MACW,GAAMD,EAASE,Q,OAC5B,MADa,S,cAIXhD,EAAO,KAEH0C,G,IACD,mB,IAGA,mB,IAGA,uB,IAGA,oB,IAGA,2B,oBAXI,SAAMI,EAASG,Q,OACtB,OADAjD,EAAO,SACP,O,OAEO,SAAM8C,EAASE,Q,OACtB,OADAhD,EAAO,SACP,O,OAEO,SAAM8C,EAASI,Y,OACtB,OADAlD,EAAO,SACP,O,QAEO,SAAM8C,EAASK,Q,QACtB,OADAnD,EAAO,SACP,O,QAEO,SAAM8C,EAASM,e,QACtB,OADApD,EAAO,SACP,O,QAEA,MAAM,IAAIqD,MAAM,8B,eAGfvB,IACHN,IACAd,EAAQV,I,WAIL,OAAS,SAACF,GACVgC,IACHN,IACAgB,IACA7B,EAAQb,OAIL,WACLgC,GAAgB,MAEjB,CACDU,EACA7B,EACA8B,EACAN,EACAI,EACA7B,EACAwB,EACAV,IAGF,IAAMO,EAAU,EAAA7B,aACd,SAACiC,GACC1B,IAEA2B,GAAW,WAAM,UACfM,aAAc,QADC,MAKjBnB,MAEF,CAACd,EAASc,IAGZ,OAAO,EAAAJ,MAAMhB,EAAO4B,EAASO,K,iUCvG/B,aAMa,EAAAD,WAAa,WAClB,MAAwB,EAAAxB,SAA0B,MAAjDyB,EAAO,KAAEgB,EAAU,KAEpBf,EAAoB,EAAArC,aAAY,SAACoC,GACrC,IAAMiB,EAAeC,MAAMC,KAAKnB,EAAQoB,WAAWC,QACjD,SAACC,EAAK,G,MAACC,EAAG,KAAEC,EAAK,KAAM,cAClBF,KAAG,MACLC,GAAMC,EAAK,MAEd,IAGFR,GAAW,WAAM,OAAAC,OAChB,IAMH,MAAO,CACLjB,QAAO,EACPC,kBAAiB,EACjBC,oBAP0B,EAAAtC,aAAY,WACtCoD,GAAW,WAAM,iBAChB,O,4ECvBQ,EAAAnC,MAAQ,W,IAAsB,sDAAkB,OAAA4C,I,QCA7DC,EAAOC,QAAUC,ICCbC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBtE,IAAjBuE,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAM,EAAoBF,GAAUG,KAAKR,EAAOC,QAASD,EAAQA,EAAOC,QAASG,GAGpEJ,EAAOC,Q,wHCrBf,YAAS,+EAAAhC,iBACT,aAAS,kFAAAb,qB","file":"index.min.js","sourcesContent":["import { useCallback, useMemo, useReducer } from \"react\";\n\nexport interface State<TData, TError = any> {\n  status: \"init\" | \"request\" | \"failure\" | \"success\";\n  data?: TData;\n  error?: TError;\n}\n\nexport type Action<K extends string, V = void> = V extends void\n  ? { type: K }\n  : { type: K } & V;\n\nexport type ActionFetch<T> =\n  | Action<\"request\">\n  | Action<\"success\", { payload: T }>\n  | Action<\"failure\", { payload: any }>;\n\nexport const useFetchReducer = <TData, TError>() => {\n  const initialState = useMemo<State<TData, TError>>(\n    () => ({\n      status: \"init\",\n      error: undefined,\n      data: undefined,\n    }),\n    []\n  );\n\n  const fetchReducer = useCallback(\n    (\n      state: State<TData, TError>,\n      action: ActionFetch<TData>\n    ): State<TData, TError> => {\n      switch (action.type) {\n        case \"request\":\n          return { ...initialState, status: \"request\", data: state.data };\n        case \"success\":\n          return { ...initialState, status: \"success\", data: action.payload };\n        case \"failure\":\n          return { ...initialState, status: \"failure\", error: action.payload };\n        default:\n          return state;\n      }\n    },\n    [initialState]\n  );\n\n  const [state, dispatch] = useReducer(fetchReducer, initialState);\n\n  const request = useCallback(() => dispatch({ type: \"request\" }), []);\n\n  const success = useCallback(\n    (payload) => dispatch({ type: \"success\", payload }),\n    []\n  );\n\n  const failure = useCallback(\n    (payload) => dispatch({ type: \"failure\", payload }),\n    []\n  );\n\n  return {\n    state,\n    request,\n    success,\n    failure,\n  };\n};\n","import { useState, useCallback } from \"react\";\nimport { tuple } from \"../utils/tuple\";\n\nexport const useTrigger = (initialState = false) => {\n  const [state, setState] = useState(initialState);\n\n  const onHandler = useCallback(() => setState(() => true), []);\n\n  const offHandler = useCallback(() => setState(() => false), []);\n\n  const togglerHandler = useCallback(() => setState((prev) => !prev), []);\n\n  return tuple(state, {\n    onHandler,\n    offHandler,\n    togglerHandler,\n  });\n};\n","import { useCallback, useEffect } from \"react\";\nimport { useTrigger } from \"../hooks/use-trigger\";\nimport { tuple } from \"../utils/tuple\";\nimport { useFetchReducer } from \"../hooks/use-fetch-reducer\";\nimport { useParams } from \"./use-params\";\n\nexport const useCallbackAsync = <\n  TData,\n  TError = any,\n  TParams extends any[] = any[]\n>(\n  callback: (...params: TParams) => Promise<TData>\n) => {\n  const { state, request, success, failure } = useFetchReducer<TData, TError>();\n\n  const [isStartFetch, { onHandler: fetchStart, offHandler: fetchFinish }] =\n    useTrigger();\n\n  const { params, setParamsHandler, clearParamsHandler } = useParams<TParams>();\n\n  useEffect(() => {\n    if (!isStartFetch) return;\n\n    let cancelRequest = false;\n\n    (async (...params: TParams) => {\n      try {\n        const data = await callback(...params);\n\n        if (cancelRequest) return;\n\n        fetchFinish();\n        success(data);\n        clearParamsHandler();\n      } catch (error) {\n        if (cancelRequest) return;\n\n        fetchFinish();\n        failure(error);\n        clearParamsHandler();\n      }\n    })(...params);\n\n    return () => {\n      cancelRequest = true;\n    };\n  }, [\n    callback,\n    failure,\n    fetchFinish,\n    isStartFetch,\n    success,\n    params,\n    clearParamsHandler,\n  ]);\n\n  const doFetch = useCallback(\n    (...params: TParams) => {\n      setParamsHandler(params);\n      request();\n      fetchStart();\n    },\n    [request, fetchStart, setParamsHandler]\n  );\n\n  return tuple(state, doFetch);\n};\n","import { useCallback, useState } from \"react\";\n\nexport const useParams = <TParams extends any[] = any[]>() => {\n  const [params, setParams] = useState<TParams>([] as any);\n\n  const setParamsHandler = useCallback((params: TParams) => {\n    setParams(() => params);\n  }, []);\n\n  const clearParamsHandler = useCallback(() => {\n    setParams(() => [] as any);\n  }, []);\n\n  return {\n    params,\n    setParamsHandler,\n    clearParamsHandler,\n  };\n};\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useTrigger } from \"../hooks/use-trigger\";\nimport { tuple } from \"../utils/tuple\";\nimport { useFetchReducer } from \"../hooks/use-fetch-reducer\";\nimport { useHeaders } from \"./use-headers\";\n\ninterface UseFetchOption extends RequestInit {\n  responseType?: \"text\" | \"json\" | \"formData\" | \"blob\" | \"arrayBuffer\";\n}\n\nexport const useFetchByUrl = <TData, TError = any>(url: string) => {\n  const [options, setOptions] = useState<UseFetchOption>({} as UseFetchOption);\n\n  const { headers, setHeadersHandler, clearHeadersHandler } = useHeaders();\n\n  const { state, request, success, failure } = useFetchReducer<TData, TError>();\n\n  const [isFetch, { onHandler: fetchStart, offHandler: fetchFinish }] =\n    useTrigger();\n\n  useEffect(() => {\n    if (!isFetch) {\n      return;\n    }\n\n    let cancelRequest = false;\n\n    const doFetch = async () => {\n      const { responseType, ...optionsFetch } = options;\n\n      const response = await fetch(url.toString(), optionsFetch);\n\n      setHeadersHandler(response.headers);\n\n      if (!response.ok) {\n        const body = await response.json();\n        throw body;\n      }\n\n      let data = null;\n\n      switch (responseType) {\n        case \"text\":\n          data = await response.text();\n          break;\n        case \"json\":\n          data = await response.json();\n          break;\n        case \"formData\":\n          data = await response.formData();\n          break;\n        case \"blob\":\n          data = await response.blob();\n          break;\n        case \"arrayBuffer\":\n          data = await response.arrayBuffer();\n          break;\n        default:\n          throw new Error(\"Not found type of response\");\n      }\n\n      if (!cancelRequest) {\n        fetchFinish();\n        success(data);\n      }\n    };\n\n    doFetch().catch((error) => {\n      if (!cancelRequest) {\n        fetchFinish();\n        clearHeadersHandler();\n        failure(error);\n      }\n    });\n\n    return () => {\n      cancelRequest = true;\n    };\n  }, [\n    clearHeadersHandler,\n    failure,\n    isFetch,\n    options,\n    setHeadersHandler,\n    success,\n    url,\n    fetchFinish,\n  ]);\n\n  const doFetch = useCallback(\n    (options?: UseFetchOption) => {\n      request();\n\n      setOptions(() => ({\n        responseType: \"json\",\n        ...options,\n      }));\n\n      fetchStart();\n    },\n    [request, fetchStart]\n  );\n\n  return tuple(state, doFetch, headers);\n};\n","import { useCallback, useState } from \"react\";\n\ntype useHeadersState = {\n  [key: string]: string;\n} | null;\n\nexport const useHeaders = () => {\n  const [headers, setHeaders] = useState<useHeadersState>(null);\n\n  const setHeadersHandler = useCallback((headers: Headers) => {\n    const headersFinal = Array.from(headers.entries()).reduce(\n      (res, [key, value]) => ({\n        ...res,\n        [key]: value,\n      }),\n      {}\n    );\n\n    setHeaders(() => headersFinal);\n  }, []);\n\n  const clearHeadersHandler = useCallback(() => {\n    setHeaders(() => null);\n  }, []);\n\n  return {\n    headers,\n    setHeadersHandler,\n    clearHeadersHandler,\n  };\n};\n","export const tuple = <T extends unknown[]>(...args: T): T => args;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__297__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export { useFetchByUrl } from \"./use-fetch-by-url\";\nexport { useCallbackAsync } from \"./use-fetch-by-callback\";\n"],"sourceRoot":""}